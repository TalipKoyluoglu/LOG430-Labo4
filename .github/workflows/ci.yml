name: CI/CD Pipeline - LOG430 Labo4

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: lab4db
          POSTGRES_USER: labuser
          POSTGRES_PASSWORD: labpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U labuser -d lab4db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379

    env:
      POSTGRES_DB: lab4db
      POSTGRES_USER: labuser
      POSTGRES_PASSWORD: labpass
      DB_HOST: localhost
      DB_PORT: 5432
      DJANGO_SETTINGS_MODULE: config.settings
      PYTHONPATH: .
      REDIS_URL: redis://localhost:6379/1

    steps:
      - name:  Checkout repo
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name:  Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black pytest pytest-django pytest-cov

      - name:  Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U $POSTGRES_USER; do sleep 1; done

      - name:  Wait for Redis to be ready
        run: |
          echo "Waiting for Redis..."
          until nc -z localhost 6379; do sleep 1; done

      - name:  Run migrations
        run: |
          python manage.py migrate
          python manage.py loaddata initial_data.json

      - name:  Run unit and integration tests
        run: |
          echo "Running unit and integration tests..."
          pytest magasin/tests/ -v --tb=short

      - name: Run API tests
        run: |
          echo "Running API-specific tests..."
          pytest magasin/api/tests/ -v --tb=short

      - name: Run all tests with coverage
        run: |
          echo "Running complete test suite with coverage..."
          pytest --cov=magasin --cov-report=term-missing --cov-report=xml

      - name:  Check code formatting with Black
        run: |
          black --check . --exclude '/(migrations|\.venv|\.env|__pycache__|env|venv|\.pytest_cache)/'

      - name:  Build Docker image
        run: |
          docker build -t talipkoyluoglu/log430-labo4:latest .

      - name:  Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name:  Push Docker image
        run: |
          docker push talipkoyluoglu/log430-labo4:latest

  deploy:
      name: Deploy to VM via SSH
      needs: build-test
      runs-on: self-hosted
      steps:
        
        - name: SSH & deploy to VM
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            password: ${{ secrets.PASSWORD }}
            port: 22
            script: |
              set -e

                # clone once, then on every run reset to main
                if [ ! -d ~/magasin-mere-test-charge ]; then
                  git clone https://github.com/TalipKoyluoglu/LOG430-Labo4 ~/magasin-mere-test-charge
                fi
                cd ~/magasin-mere-test-charge
                git fetch --all
                git reset --hard origin/main

                # log into Docker Hub
                echo "${{ secrets.DOCKER_PASSWORD }}" \
                  | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

                # tear down old containers
                docker-compose down --remove-orphans

                # pull new images (if you push to Docker Hub)
                docker-compose pull

                # rebuild & start fresh
                docker-compose up -d --build --remove-orphans